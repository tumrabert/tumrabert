name: Update README with Portfolio Data

on:
  schedule:
    # Runs every day at 5 AM UTC (12 PM midnight Bangkok time GMT+7)
    - cron: '0 17 * * *'
  workflow_dispatch: # Allows manual trigger
  push:
    branches: [ main ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios
        
    - name: Create update script
      run: |
        cat > update-readme.js << 'SCRIPT_EOF'
        const axios = require('axios');
        const fs = require('fs');

        async function updateReadme() {
          try {
            console.log('Fetching portfolio data...');
            const response = await axios.get('https://tumrabert.com/api/portfolio');
            
            if (!response.data || !response.data.success || !response.data.data) {
              throw new Error('Invalid API response structure');
            }
            
            const data = response.data.data;
            const intro = data.intro || {};
            const workExperiences = data.workExperiences || [];
            const technologies = data.technologies || [];
            const projects = data.displayProjects || [];
            
            // Read template file
            const template = fs.readFileSync('.github/templates/readme-template.md', 'utf8');
            
            // Group technologies by category
            const groupedTech = technologies.reduce((acc, tech) => {
              if (tech && tech.category && tech.name) {
                if (!acc[tech.category]) acc[tech.category] = [];
                acc[tech.category].push(tech.name);
              }
              return acc;
            }, {});
            
            function createBadgeUrl(tech) {
              const safeTech = encodeURIComponent(tech.replace(/[^a-zA-Z0-9\s]/g, ''));
              const logoName = tech.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/\s+/g, '');
              return `![${tech}](https://img.shields.io/badge/-${safeTech}-000000?style=flat-square&logo=${logoName}&logoColor=white)`;
            }
            
            // Build dynamic content
            let currentRole = 'Currently seeking new opportunities';
            if (workExperiences.length > 0 && workExperiences[0]) {
              const exp = workExperiences[0];
              currentRole = '**' + (exp.position || 'Software Engineer') + '** @ **' + (exp.company || 'Tech Company') + '**\\n';
              currentRole += '📅 ' + (exp.start || 'Present') + ' - ' + (exp.end || 'Present') + '\\n\\n';
              if (exp.details && Array.isArray(exp.details)) {
                currentRole += exp.details.map(detail => '- ' + detail).join('\\n');
              }
            }

            let techStack = '### Programming Languages\\nWorking with various technologies to build amazing projects!';
            if (Object.entries(groupedTech).length > 0) {
              techStack = Object.entries(groupedTech).map(([category, techs]) => {
                const badges = techs && Array.isArray(techs) ? techs.map(tech => createBadgeUrl(tech)).join(' ') : '';
                return '\\n### ' + category + '\\n' + badges;
              }).join('');
            }

            let featuredProjects = '### 🚀 Coming Soon\\nCurrently working on exciting projects that will be showcased here soon!';
            if (projects && Array.isArray(projects) && projects.length > 0) {
              featuredProjects = projects.filter(p => p && !p.hide).slice(0, 3).map(project => {
                const name = project.name || 'Untitled Project';
                const url = project.demo || project.github || '#';
                const desc = project.description ? project.description.substring(0, 150) + '...' : 'Amazing project that showcases innovative solutions and technical expertise.';
                const techs = project.technologies && Array.isArray(project.technologies) ? project.technologies.map(tech => '`' + tech + '`').join(' ') : 'Various technologies';
                const githubBadge = project.github ? '[![GitHub](https://img.shields.io/badge/-GitHub-181717?style=flat-square&logo=github)](' + project.github + ')' : '';
                const demoBadge = project.demo ? '[![Demo](https://img.shields.io/badge/-Live_Demo-FF6B6B?style=flat-square&logo=vercel)](' + project.demo + ')' : '';
                return '\\n### 🔗 [' + name + '](' + url + ')\\n\\n' + desc + '\\n\\n**Tech Stack**: ' + techs + '\\n\\n' + githubBadge + ' ' + demoBadge;
              }).join('');
            }

            // Replace template placeholders
            const readme = template
              .replace('{{name}}', intro.name || 'Tanakit')
              .replace('{{title}}', intro.title || 'AI Software Engineer')
              .replace('{{location}}', intro.location || 'Bangkok, Thailand')
              .replace('{{description}}', intro.description?.substring(0, 200) || 'Passionate about building intelligent systems that solve real-world problems')
              .replace('{{experience}}', intro.quickFacts?.yearOfExperience || '3')
              .replace('{{projectsCount}}', intro.quickFacts?.projectsCount || '10')
              .replace('{{technologiesCount}}', intro.quickFacts?.technologiesCount || '20')
              .replace('{{hobbies}}', intro.quickFacts?.hobbies?.join(', ') || 'Running, Music, Gaming')
              .replace('{{currentRole}}', currentRole)
              .replace('{{techStack}}', techStack)
              .replace('{{featuredProjects}}', featuredProjects)
              .replace('{{email}}', intro.email || 'email@domain.com')
              .replace('{{linkedin}}', intro.linkedin ? intro.linkedin.replace('linkedin.com/in/', 'linkedin.com/in/') : 'linkedin.com/in/tumrabert')
              .replace('{{lastUpdated}}', new Date().toLocaleString('en-US', { 
                timeZone: 'Asia/Bangkok', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric', 
                hour: '2-digit', 
                minute: '2-digit', 
                timeZoneName: 'short' 
              }));

            fs.writeFileSync('README.md', readme);
            console.log('README.md updated successfully!');
            
          } catch (error) {
            console.error('Error updating README:', error.message);
            const timestamp = new Date().toLocaleString('en-US', { 
              timeZone: 'Asia/Bangkok', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit', 
              timeZoneName: 'short' 
            });
            const fallbackReadme = '# Hi there, I am Tanakit 👋\\n\\n' +
              '## 🚀 About Me\\n' +
              '**AI Software Engineer** | Bangkok, Thailand 📍\\n' +
              '> Passionate about building intelligent systems that solve real-world problems...\\n\\n' +
              '## 📫 Let us Connect\\n' +
              '[![GitHub](https://img.shields.io/badge/-GitHub-181717?style=for-the-badge&logo=github)](https://github.com/tumrabert)\\n' +
              '[![LinkedIn](https://img.shields.io/badge/-LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://linkedin.com/in/tumrabert)\\n' +
              '[![Portfolio](https://img.shields.io/badge/-Portfolio-FF6B6B?style=for-the-badge&logo=vercel)](https://tumrabert.com)\\n\\n' +
              '---\\n' +
              '*API temporarily unavailable. README will be updated when service is restored.*\\n' +
              '*Last attempted update: ' + timestamp + '*';
            
            fs.writeFileSync('README.md', fallbackReadme);
            console.log('Fallback README.md created due to API error');
          }
        }

        updateReadme();
        SCRIPT_EOF

    - name: Run update script
      run: node update-readme.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "🤖 Auto-update README with latest portfolio data"
        git push